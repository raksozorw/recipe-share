import React from 'react'
import { Field, reduxForm } from 'redux-form';


class StreamForm extends React.Component {
// destructuring the formProps which gives us an input object generated by the Field comp and sent back through the reduxForm function
    renderInput({input, label, meta}) { 
        return (
            <div className="field">
                <label>{label}</label>
                <input {...input} autoComplete="off"/>
                {meta.touched && <div className="ui error message">{meta.error}</div>}
                </div>
        )
    };

    onSubmit = (formValues) => {
       this.props.onSubmit(formValues)
    }

    render() {
        return <div>
            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className="ui form error">
                {/* handle submit is provided by redux form, we then pass in our own handler function... they call prevent default */}
                <Field name="title" component={this.renderInput} label="Enter Title"/>
                <Field name="description" component={this.renderInput} label="Enter Description" />
                <button className="ui button primary">Submit</button>
            </form>
        </div>
    }
}

const validate = (formValues) => {
    const errors = {};
    if (!formValues.title) {
    errors.title = "Please enter a title."
    } 
    if (!formValues.description) {
        errors.description = "Please enter a description."
    }

    return errors 
};
// redux form looks for Field names that match validate errors object names, and passes them into the renderInput function

export default reduxForm({
    form: 'streamForm',
    validate: validate
})(StreamForm);

