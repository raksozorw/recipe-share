import React from 'react'
import { createStream, signIn } from '../../actions';
import { connect } from 'react-redux';
import StreamForm from './StreamForm'
import GoogleAuth from '../GoogleAuth'
import {Spinner} from 'react-bootstrap';



class StreamCreate extends React.Component {
// destructuring the formProps which gives us an input object generated by the Field comp and sent back through the reduxForm function
  
  

    onSubmit = (formValues) => {
       this.props.createStream(formValues)
    }


    signedIn = () => {
        return <div className="create">
         <div>
                        <h1>Create a Recipe</h1>
                        <div className="container">
                            <StreamForm onSubmit={this.onSubmit} photo={this.props.photo} />
                        </div>
                    </div>
    </div>
    }
    
    notSignedIn = () => {
        return <div className="create">
            <div className="sign-in-page">
                <div className="sign-in-prompt">
                    <h4>Please sign in to create a recipe.</h4>
                    <GoogleAuth />
                    <img className="logo" src={require('/Users/oskarwroz/Documents/WebDev-Projects/recipe-share-app/recipe-share/src/images/no-text-logo.png')} alt="logo"></img>
                </div>
            </div>
        </div>
    };

    loadSignedIn = () => {
        return <div className="create">
            <div className="sign-in-page">
                <div className="sign-in-prompt">
                    <h4>Loading...</h4>
                    <Spinner animation="border" role="status">
                        <span className="sr-only">Loading...</span>
                    </Spinner>
                    
                </div>
            </div>
        </div>
    };



    render() {
        if (this.props.isSignedIn === false) {
            return this.notSignedIn()
        } else if (this.props.isSignedIn === null) {
            return this.loadSignedIn()
        } else {
            return this.signedIn()
        }
    }
};


// redux form looks for Field names that match validate errors object names, and passes them into the renderInput function

const mapStateToProps = (state) => {
    return {
        photo: state.streams.photo,
        isSignedIn: state.auth.isSignedIn
    }
}

export default connect(mapStateToProps, { createStream })(StreamCreate);


//LOOK ON STREAMS VERSION FOR WHERE WE GET THE DAMN ID FROM 