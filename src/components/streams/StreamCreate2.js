import React, {useState, useEffect} from 'react'
import { createStream, fetchStream, deleteStream } from '../../actions';
import { useSelector, useDispatch } from 'react-redux';
import StreamForm from './StreamForm'
import {useParams} from 'react-router';



const StreamCreate2 = () => {
// destructuring the formProps which gives us an input object generated by the Field comp and sent back through the reduxForm function
    let { id } = useParams()

const [active, setActive] = useState(false)
   
    const stream = useSelector(state => state.streams[id])
    const photo = useSelector(state => state.streams.photo)
  
    const dispatch = useDispatch()

    


  
   
    const onSubmit = (formValues) => {
        dispatch(createStream(formValues))
        dispatch(deleteStream(id))
    }


   
    return (
        <div className="create" onMouseOver={() => {
             dispatch(fetchStream(id))
            setActive(true)
        }}>
            <h1>Edit Recipe</h1>
            {!active && <div className="filler"></div>}
            <div className="container">
               <button onClick={() => {
                       dispatch(fetchStream(id))
                console.log(stream)
                setActive(true)
                
                }}>Change Stream</button>
                </div>
           <div>
                {active && stream && <div className="container">
                    <StreamForm initialValues={{
                        title: stream.title,
                        description: stream.description,
                        ingredients: stream.ingredients,
                        methods: stream.methods
                    }} photo={photo} onSubmit={onSubmit} />
                </div>}
            </div>
            </div>
        )
    }



// redux form looks for Field names that match validate errors object names, and passes them into the renderInput function

export default StreamCreate2